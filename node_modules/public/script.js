// Pastikan skrip ini dieksekusi setelah seluruh elemen HTML dimuat.
// Anda bisa meletakkan tag <script> di akhir <body> atau menggunakan event listener DOMContentLoaded.

// Elemen-elemen DOM yang dibutuhkan oleh skrip
const form = document.getElementById('chat-form');
const input = document.getElementById('user-input');
const chatBox = document.getElementById('chat-box');
// Anda perlu menambahkan elemen ini di HTML Anda untuk indikator loading, contohnya: <div id="loading-indicator" class="hidden">...</div>
const loadingIndicator = document.getElementById('loading-indicator'); 

// Variabel ini akan menyimpan riwayat percakapan agar bot memiliki konteks
let chatHistory = [];

/**
 * Event listener untuk pengiriman form.
 * Menggunakan async/await untuk penanganan proses asynchronous yang lebih rapi.
 */
form.addEventListener('submit', async function (e) {
    // Mencegah perilaku default form yang akan me-reload halaman
    e.preventDefault(); 

    const userMessage = input.value.trim();
    if (!userMessage) {
        return; // Jangan lakukan apa-apa jika input kosong
    }

    // Tampilkan pesan pengguna di chat box
    appendMessage('user', userMessage);
    input.value = ''; // Kosongkan kolom input
    
    // Tambahkan pesan pengguna ke riwayat untuk dikirim ke API
    chatHistory.push({ role: "user", parts: [{ text: userMessage }] });

    // Tampilkan indikator loading saat menunggu jawaban
    if(loadingIndicator) loadingIndicator.style.display = 'block';

    try {
        // Alih-alih memanggil API Gemini secara langsung, kita panggil endpoint di backend Anda.
        // Ganti '/api/chat' jika endpoint Anda berbeda.
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            // Kirim seluruh riwayat percakapan ke backend
            body: JSON.stringify({ history: chatHistory }), 
        });

        if (!response.ok) {
            // Jika respons dari server tidak "OK" (misal: error 404 atau 500), lempar error.
            throw new Error(`Error dari server: ${response.status}`);
        }

        const data = await response.json();
        const botReply = data.reply; // Asumsi backend Anda mengembalikan JSON dengan key "reply"

        if (botReply) {
            // Tampilkan balasan dari bot
            appendMessage('bot', botReply);
            // Tambahkan juga balasan bot ke riwayat percakapan
            chatHistory.push({ role: "model", parts: [{ text: botReply }] });
        } else {
            appendMessage('bot', 'Maaf, saya tidak menerima balasan yang valid.');
        }

    } catch (error) {
        // Tangani error jika terjadi masalah pada jaringan atau pada saat fetch
        console.error('Error saat fetch:', error);
        appendMessage('bot', 'Error: Tidak dapat terhubung ke server. Silakan coba lagi nanti.');
    } finally {
        // Sembunyikan kembali indikator loading, baik berhasil maupun gagal
        if(loadingIndicator) loadingIndicator.style.display = 'none';
    }
});

/**
 * Fungsi bantuan untuk menambahkan pesan baru ke dalam chat box.
 * @param {string} sender - Pengirim pesan, 'user' atau 'bot'.
 * @param {string} text - Isi pesan.
 */
function appendMessage(sender, text) {
    const msgContainer = document.createElement('div');
    
    // Tambahkan kelas CSS untuk styling. Anda perlu mendefinisikan kelas 'message', 'user-message', dan 'bot-message' di file CSS Anda.
    msgContainer.classList.add('message', sender === 'user' ? 'user-message' : 'bot-message');
    
    // Mengubah newline menjadi <br> agar format teks tetap terjaga
    msgContainer.innerHTML = text.replace(/\n/g, '<br>');

    chatBox.appendChild(msgContainer);
    
    // Otomatis scroll ke pesan paling bawah
    chatBox.scrollTop = chatBox.scrollHeight;
}
